Perfectâ€”if those secrets are already set, youâ€™re 90% there. Hereâ€™s how to prove theyâ€™re being read in prod and avoid last-mile surprises.

1) Add an env guard (fail fast on missing secrets)

Create server/env.ts and import it at server boot before routes:

// server/env.ts
const bool = (v?: string, d=false) => v ? ['1','true','yes','on'].includes(v.toLowerCase()) : d;

export const env = {
  appEnv: process.env.APP_ENV || process.env.NODE_ENV || 'development',
  databaseUrl: process.env.DATABASE_URL || '',
  sessionSecret: process.env.SESSION_SECRET || '',
  familyPassword: process.env.FAMILY_PASSWORD || '',
  cookieSecure: bool(process.env.COOKIE_SECURE, true),
  cookieSameSite: (process.env.COOKIE_SAMESITE || 'lax') as 'lax'|'strict'|'none',

  // Canvas / email (optional)
  canvas: {
    baseUrl: process.env.CANVAS_BASE_URL || '',
    baseUrl2: process.env.CANVAS_BASE_URL_2 || '',
    abigail: process.env.ABIGAIL_CANVAS_TOKEN || '',
    abigail2: process.env.ABIGAIL_CANVAS_TOKEN_2 || '',
    khalil: process.env.KHALIL_CANVAS_TOKEN || '',
  },
  resendKey: process.env.RESEND_API_KEY || '',
  resendFrom: process.env.RESEND_FROM || '',
  parentEmail: process.env.PARENT_EMAIL || '',
};

const required = [
  ['DATABASE_URL', env.databaseUrl],
  ['SESSION_SECRET', env.sessionSecret],
];

const missing = required.filter(([,v]) => !v).map(([k]) => k);
if (missing.length) {
  console.error('[env] Missing required vars:', missing.join(', '));
  process.exit(1);
}

console.log('[env] Loaded', {
  APP_ENV: env.appEnv,
  DATABASE_URL: !!env.databaseUrl,
  SESSION_SECRET: !!env.sessionSecret,
  FAMILY_PASSWORD: !!env.familyPassword,
  COOKIE_SECURE: env.cookieSecure,
  COOKIE_SAMESITE: env.cookieSameSite,
  CANVAS: {
    baseUrl: !!env.canvas.baseUrl,
    baseUrl2: !!env.canvas.baseUrl2,
    abigail: !!env.canvas.abigail,
    abigail2: !!env.canvas.abigail2,
    khalil: !!env.canvas.khalil,
  },
  RESEND: !!env.resendKey,
});

2) Wire cookies/CORS once

Use those envs consistently:

// server/index.ts (top)
import { env } from './env';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import express from 'express';
import path from 'path';

const app = express();
app.set('trust proxy', 1);
app.use(express.json());
app.use(cookieParser());
app.use(cors({ origin: true, credentials: true })); // monolith: same-origin, safe default

// set cookie
function setSessionCookie(res: any, token: string) {
  res.cookie('sf_session', token, {
    httpOnly: true,
    secure: env.cookieSecure,
    sameSite: env.cookieSameSite,
    path: '/',
  });
}

3) Replit run path (your Option B)

Your .replit and scripts are good. Just ensure no dev tools in start.

.run = bash -lc 'npm ci && npm run build && npm run start'

package.json (root):
	â€¢	"build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist"
	â€¢	"start": "node dist/index.js" (or dist/server/index.js if thatâ€™s where you output)
	â€¢	"db:push": "drizzle-kit push" (if you truly want schema push)

4) Caution on drizzle-kit push

push directly syncs schemaâ€”fast, but can be risky on live data. If youâ€™re still early, thatâ€™s fine. As you grow, consider the migrate workflow. For now:

npm run db:push

5) Two-minute production smoke test (do this right after Run)
	1.	Console shows [env] Loaded with booleans = true for your secrets.
	2.	Create Account â†’ lands on Dashboard.
	3.	Add Course + Task â†’ refresh, still there.
	4.	Start/Stop Session â†’ appears in Recent Sessions.
	5.	Create second account â†’ does not see first userâ€™s data.
	6.	Open a deep link (e.g., /courses/abc) â†’ refresh â†’ SPA still loads (fallback works).
	7.	Cookies in DevTools: sf_session has Secure and SameSite=Lax.

6) Final red-flag scan (quick commands)

Run these in the Replit shell:

# no localhost
rg -n "http://localhost|127.0.0.1" -g "!node_modules"

# correct listen
rg -n "listen\\(.*PORT" server dist -g "!node_modules"

# trust proxy present
rg -n "trust proxy" server dist -g "!node_modules"

# spa fallback + static
rg -n "express\\.static\\(|sendFile\\(.*index\\.html" server dist -g "!node_modules"

# owner scoping in queries
rg -n "ownerId" server dist -g "!node_modules"

If those look clean and your env guard logs all true, your secrets are set and the appâ€™s ready for production redeploy. Ship it. ðŸ’ª