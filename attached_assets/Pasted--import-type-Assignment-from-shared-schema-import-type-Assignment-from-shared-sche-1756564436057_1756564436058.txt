@@
-import type { Assignment } from '@shared/schema';
+import type { Assignment } from '@shared/schema';

+// Minimal shape Guided can consume when parent pre-composes the day
+type GuidedBlock = {
+  id: string;
+  type: 'assignment' | 'bible' | 'fixed';
+  title: string;
+  startTime: string; // 'HH:MM'
+  endTime: string;   // 'HH:MM'
+  estimatedMinutes?: number;
+  assignmentId?: string | null;
+};
@@
-interface GuidedDayViewProps {
-  assignments: Assignment[];
-  studentName: string;
-  selectedDate: string;
-  scheduleTemplate?: any[];
-  onAssignmentUpdate?: () => void;
-  onModeToggle?: () => void;
-}
+interface GuidedDayViewProps {
+  assignments: Assignment[];
+  studentName: string;
+  selectedDate: string;
+  scheduleTemplate?: any[];
+  /** NEW: when provided, Guided will use this EXACT sequence (matches Overview) */
+  composedSchedule?: GuidedBlock[];
+  onAssignmentUpdate?: () => void;
+  onModeToggle?: () => void;
+}
@@
-export function GuidedDayView({
-  assignments = [],
-  studentName = "Student",
-  selectedDate = new Date().toISOString().split('T')[0],
-  scheduleTemplate = [],
-  onAssignmentUpdate,
-  onModeToggle
-}: GuidedDayViewProps) {
+export function GuidedDayView({
+  assignments = [],
+  studentName = "Student",
+  selectedDate = new Date().toISOString().split('T')[0],
+  scheduleTemplate = [],
+  composedSchedule = [],
+  onAssignmentUpdate,
+  onModeToggle
+}: GuidedDayViewProps) {
@@
-  // Build actual schedule from schedule template (like the existing system)
+  // Build actual schedule from schedule template (fallback) OR use parent-composed
   const buildScheduleBlocks = (): ScheduleBlock[] => {
     if (scheduleTemplate.length === 0) {
       // Demo schedule for testing
       return [
         { id: '1', type: 'assignment', title: 'Math - Algebra Pr...
       ];
     }
@@
-  const scheduleBlocks = buildScheduleBlocks();
+  const scheduleBlocks: any[] =
+    (composedSchedule && composedSchedule.length > 0)
+      ? composedSchedule
+      : buildScheduleBlocks();
