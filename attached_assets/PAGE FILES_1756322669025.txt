HOME
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useQuery } from "@tanstack/react-query";
import {
  GraduationCap,
  CheckCircle,
  Clock,
  AlertCircle,
  Printer,
  Settings,
  Shield
} from "lucide-react";

export default function Home() {
  // Fetch real stats from the API
  const { data: statsData, isLoading: statsLoading } = useQuery({
    queryKey: ['/api/stats'],
    queryFn: async () => {
      const response = await fetch('/api/stats');
      if (!response.ok) throw new Error('Failed to fetch stats');
      return response.json();
    }
  });

  // Create stats array with real data
  const stats = [
    {
      icon: GraduationCap,
      title: "Active Learners",
      value: statsLoading ? "..." : String(statsData?.activeStudents || 2),
      description: "Students engaged in today's learning journey",
      color: "primary",
      gradient: "linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)"
    },
    {
      icon: CheckCircle,
      title: "Completed",
      value: statsLoading ? "..." : String(statsData?.completed || 0),
      description: "Tasks completed today",
      color: "complete",
      gradient: "linear-gradient(135deg, var(--status-complete) 0%, #4ADE80 100%)"
    },
    {
      icon: Clock,
      title: "In Progress",
      value: statsLoading ? "..." : String(statsData?.inProgress || 0), 
      description: "Taking extra time to master concepts",
      color: "progress",
      gradient: "linear-gradient(135deg, var(--status-progress) 0%, #60A5FA 100%)"
    },
    {
      icon: AlertCircle,
      title: "Need Support",
      value: statsLoading ? "..." : String(statsData?.needSupport || 0),
      description: "Students ready for guidance",
      color: "blocked",
      gradient: "linear-gradient(135deg, var(--status-blocked) 0%, #8B93A8 100%)"
    }
  ];
  return (
    <div className="min-h-screen" style={{ background: 'linear-gradient(135deg, var(--background) 0%, var(--surface-secondary) 100%)' }}>
      {/* Header */}
      <header style={{ 
        background: 'rgba(248, 249, 250, 0.8)', 
        backdropFilter: 'blur(12px) saturate(1.1)',
        borderBottom: '1px solid var(--border)',
        position: 'sticky',
        top: 0,
        zIndex: 100
      }}>
        <div className="max-w-6xl mx-auto px-8 py-4 flex justify-between items-center">
          <a href="/" className="flex items-center text-2xl font-bold text-primary no-underline">
            <div style={{
              width: '36px',
              height: '36px',
              background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)',
              borderRadius: '10px',
              marginRight: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: 'white',
              fontWeight: 600,
              boxShadow: 'var(--shadow-sm)'
            }}>
              S
            </div>
            StudyFlow
          </a>
          
          <div className="flex items-center gap-3 text-sm text-muted-foreground">
            <span className="hover:text-foreground transition-colors cursor-pointer">Settings</span>
            <div className="flex items-center gap-2">
              <div style={{
                width: '36px',
                height: '36px',
                background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%)',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: 'white',
                fontWeight: 600,
                fontSize: '14px',
                cursor: 'pointer',
                transition: 'all 0.2s',
                boxShadow: 'var(--shadow-sm)'
              }} onMouseEnter={(e) => {
                (e.currentTarget as HTMLElement).style.transform = 'scale(1.05)';
                (e.currentTarget as HTMLElement).style.boxShadow = 'var(--shadow-md)';
              }} onMouseLeave={(e) => {
                (e.currentTarget as HTMLElement).style.transform = 'scale(1)';
                (e.currentTarget as HTMLElement).style.boxShadow = 'var(--shadow-sm)';
              }} title="Parent/Admin Account">
                PA
              </div>
            </div>
          </div>
        </div>
      </header>
      
      <main className="max-w-6xl mx-auto px-8 py-12">
        {/* Hero Section */}
        <motion.section 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-16"
          data-testid="hero-section"
        >
          <h1 
            className="text-5xl font-bold mb-4"
            style={{ 
              background: 'linear-gradient(135deg, var(--foreground) 0%, var(--primary) 100%)',
              backgroundClip: 'text',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              letterSpacing: '-0.025em'
            }}
            data-testid="hero-title"
          >
            Focus. Plan. Achieve.
          </h1>
          <p className="text-xl text-muted-foreground mb-12 max-w-2xl mx-auto" data-testid="hero-description">
            A thoughtful learning hub designed for focus and growth
          </p>
          
          <div className="flex justify-center gap-4 flex-wrap mb-8">
            <Button 
              size="lg" 
              className="h-12 px-8 shadow-lg hover:shadow-xl transition-all duration-200 hover:-translate-y-0.5"
              style={{ background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)' }}
              data-testid="button-register"
              onClick={() => window.location.href = '/register'}
            >
              Register Account
            </Button>
            <Button 
              variant="outline" 
              size="lg" 
              className="h-12 px-8 shadow-sm hover:shadow-md transition-all duration-200 hover:-translate-y-0.5 hover:border-primary/30"
              data-testid="button-login"
              onClick={() => window.location.href = '/login'}
            >
              Login
            </Button>
            <Button 
              size="lg" 
              className="h-12 px-8 shadow-lg hover:shadow-xl transition-all duration-200 hover:-translate-y-0.5"
              style={{ background: 'linear-gradient(135deg, var(--status-blocked) 0%, #5A6B85 100%)' }}
              data-testid="button-print-queue"
              onClick={() => window.location.href = '/print-queue'}
            >
              <Printer className="w-4 h-4 mr-2" />
              Print Queue
            </Button>
          </div>
        </motion.section>

        {/* Quick Stats */}
        <section className="mb-16" data-testid="stats-section">
          <h2 className="text-3xl font-semibold mb-8 text-center text-foreground">
            Today's Learning Progress
          </h2>
          <motion.div 
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ duration: 0.6 }}
            viewport={{ once: true }}
            className="grid gap-6 md:grid-cols-2 lg:grid-cols-4"
            data-testid="stats-grid"
          >
            {stats.map((stat, index) => {
              const IconComponent = stat.icon;
              const getIconBg = (color: string) => {
                switch(color) {
                  case 'complete': return 'rgba(33, 191, 6, 0.1)';
                  case 'progress': return 'rgba(59, 134, 209, 0.1)';
                  case 'blocked': return 'rgba(108, 114, 147, 0.1)';
                  default: return 'var(--primary-subtle)';
                }
              };
              const getIconColor = (color: string) => {
                switch(color) {
                  case 'complete': return 'var(--status-complete)';
                  case 'progress': return 'var(--status-progress)';
                  case 'blocked': return 'var(--status-blocked)';
                  default: return 'var(--primary)';
                }
              };
              const getValueColor = (color: string) => {
                switch(color) {
                  case 'complete': return 'var(--status-complete)';
                  case 'progress': return 'var(--status-progress)';
                  case 'blocked': return 'var(--status-blocked)';
                  default: return 'var(--primary)';
                }
              };
              
              return (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  viewport={{ once: true }}
                >
                  <Card 
                    className="p-8 relative overflow-hidden transition-all duration-300 hover:shadow-xl hover:-translate-y-1 border border-border"
                    style={{ 
                      background: 'var(--card)',
                      borderRadius: '20px'
                    }}
                    data-testid={`stat-card-${index}`}
                  >
                    <div 
                      style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        height: '4px',
                        background: stat.gradient
                      }}
                    />
                    <CardContent className="p-0">
                      <div style={{
                        width: '48px',
                        height: '48px',
                        borderRadius: '12px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        marginBottom: '1rem',
                        background: getIconBg(stat.color),
                        color: getIconColor(stat.color)
                      }}>
                        <IconComponent className="w-6 h-6" />
                      </div>
                      <div className="text-sm font-semibold text-muted-foreground uppercase tracking-wide mb-2">
                        {stat.title}
                      </div>
                      <div 
                        className="text-4xl font-bold mb-2"
                        style={{ color: getValueColor(stat.color) }}
                        data-testid={`stat-value-${index}`}
                      >
                        {stat.value}
                      </div>
                      <p className="text-sm text-muted-foreground leading-relaxed" data-testid={`stat-description-${index}`}>
                        {stat.description}
                      </p>
                    </CardContent>
                  </Card>
                </motion.div>
              );
            })}
          </motion.div>
        </section>
      </main>

      {/* Footer */}
      <footer style={{ 
        background: 'var(--surface-tertiary)',
        borderTop: '1px solid var(--border)',
        marginTop: '5rem'
      }}>
        <div className="max-w-6xl mx-auto px-8 py-12 text-center">
          <p className="text-sm text-muted-foreground">
            StudyFlow • Built for focused learning
          </p>
        </div>
      </footer>
    </div>
  );
}


LOGIN
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Link, useLocation } from "wouter";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Eye, EyeOff, LogIn, ArrowLeft } from "lucide-react";

// Login form schema
const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(1, "Password is required"),
});

type LoginForm = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const [showPassword, setShowPassword] = useState(false);

  const form = useForm<LoginForm>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  const loginMutation = useMutation({
    mutationFn: async (data: LoginForm) => {
      return await apiRequest('POST', '/api/login', data);
    },
    onSuccess: (response) => {
      console.log("Login response:", response); // Debug log
      const user = response?.user;
      
      toast({
        title: "Welcome back!",
        description: "You have successfully signed in.",
      });
      
      // Redirect based on user role with safe property access
      if (user?.role === 'admin' || user?.role === 'parent') {
        navigate("/admin");
      } else {
        navigate("/student"); // Default for students
      }
    },
    onError: (error) => {
      toast({
        title: "Login failed",
        description: error.message || "Invalid email or password. Please try again.",
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: LoginForm) => {
    loginMutation.mutate(data);
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-6" style={{
      background: 'linear-gradient(135deg, var(--surface) 0%, var(--surface-elevated) 100%)'
    }}>
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <Link href="/" className="inline-flex items-center mb-6 text-decoration-none">
            <div className="w-12 h-12 rounded-xl flex items-center justify-center text-white font-bold mr-3 shadow-lg" style={{
              background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)'
            }}>
              S
            </div>
            <span className="text-3xl font-bold" style={{ color: 'var(--primary)' }}>StudyFlow</span>
          </Link>
          
          <h1 className="text-2xl font-bold mb-2" style={{ color: 'var(--text-primary)' }}>
            Welcome back
          </h1>
          <p style={{ color: 'var(--text-secondary)' }}>
            Sign in to continue to StudyFlow
          </p>
        </div>

        {/* Login Form */}
        <Card className="shadow-xl border-0" style={{
          background: 'var(--surface-elevated)',
          borderColor: 'var(--border-subtle)'
        }}>
          <CardHeader className="space-y-1">
            <CardTitle className="text-xl font-semibold" style={{ color: 'var(--text-primary)' }}>
              Sign in
            </CardTitle>
            <CardDescription style={{ color: 'var(--text-secondary)' }}>
              Enter your email and password to access your account
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              {/* Email */}
              <div className="space-y-2">
                <Label htmlFor="email" style={{ color: 'var(--text-primary)' }}>
                  Email Address
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  {...form.register("email")}
                  data-testid="input-email"
                  style={{
                    background: 'var(--surface)',
                    borderColor: 'var(--border-subtle)',
                    color: 'var(--text-primary)'
                  }}
                />
                {form.formState.errors.email && (
                  <p className="text-sm text-red-500" data-testid="error-email">
                    {form.formState.errors.email.message}
                  </p>
                )}
              </div>

              {/* Password */}
              <div className="space-y-2">
                <Label htmlFor="password" style={{ color: 'var(--text-primary)' }}>
                  Password
                </Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="Enter your password"
                    {...form.register("password")}
                    data-testid="input-password"
                    style={{
                      background: 'var(--surface)',
                      borderColor: 'var(--border-subtle)',
                      color: 'var(--text-primary)',
                      paddingRight: '2.5rem'
                    }}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                    data-testid="button-toggle-password"
                  >
                    {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                  </button>
                </div>
                {form.formState.errors.password && (
                  <p className="text-sm text-red-500" data-testid="error-password">
                    {form.formState.errors.password.message}
                  </p>
                )}
              </div>

              {/* Submit Button */}
              <Button
                type="submit"
                className="w-full py-3 font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200"
                disabled={loginMutation.isPending}
                data-testid="button-login"
                style={{
                  background: loginMutation.isPending 
                    ? 'var(--surface-secondary)'
                    : 'linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)'
                }}
              >
                {loginMutation.isPending ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    Signing in...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <LogIn size={18} />
                    Sign In
                  </div>
                )}
              </Button>
            </form>

            {/* Register Link */}
            <div className="mt-6 text-center">
              <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>
                Don't have an account?{" "}
                <Link href="/register" className="font-medium hover:underline" style={{ color: 'var(--primary)' }}>
                  Sign up
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Back to Home */}
        <div className="mt-6 text-center">
          <Link 
            href="/" 
            className="inline-flex items-center gap-2 text-sm hover:underline"
            style={{ color: 'var(--text-secondary)' }}
            data-testid="link-back-home"
          >
            <ArrowLeft size={16} />
            Back to Home
          </Link>
        </div>
      </div>
    </div>
  );
}

PRINT-QUEUE
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ExternalLink, Printer, Check, X, Clock, AlertTriangle, BookOpen, FileText, Calendar } from "lucide-react";

interface PrintQueueItem {
  id: string;
  studentName: string;
  title: string;
  courseName?: string | null;
  subject?: string | null;
  dueDate?: Date | null;
  scheduledDate?: string | null;
  printReason: string;
  priority: 'high' | 'medium' | 'low';
  canvasUrl?: string | null;
  printStatus: 'needs_printing' | 'printed' | 'skipped';
  estimatedPages: number;
}

function getPriorityColor(priority: 'high' | 'medium' | 'low'): string {
  switch (priority) {
    case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 border-red-200';
    case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 border-yellow-200';
    case 'low': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 border-blue-200';
  }
}

function getPrintReasonText(reason: string): string {
  switch (reason) {
    case 'worksheet': return '📄 Worksheet/Handout';
    case 'long_instructions': return '📋 Detailed Instructions';
    case 'contains_table': return '📊 Data Table';
    case 'multi_step_procedure': return '🔢 Step-by-Step Guide';
    case 'lab_activity': return '🔬 Science Lab';
    case 'math_problems': return '🔢 Math Problems';
    case 'reference_list': return '📝 Reference Material';
    case 'history_reference': return '📚 History Guide';
    default: return '📄 Printable Material';
  }
}

function getPrintStatusIcon(status: 'needs_printing' | 'printed' | 'skipped') {
  switch (status) {
    case 'needs_printing': return <Clock className="w-4 h-4 text-orange-600" />;
    case 'printed': return <Check className="w-4 h-4 text-green-600" />;
    case 'skipped': return <X className="w-4 h-4 text-gray-500" />;
  }
}

interface PrintQueueResponse {
  dateRange: { from: string; to: string };
  totalItems: number;
  groupsByDate: Array<{
    date: string;
    items: PrintQueueItem[];
    count: number;
    highPriorityCount: number;
  }>;
}

export default function PrintQueue() {
  const queryClient = useQueryClient();
  const [daysAhead, setDaysAhead] = useState(4); // Default to 4 days ahead

  const { data: printQueueData, isLoading } = useQuery<PrintQueueResponse>({
    queryKey: ['/api/print-queue', daysAhead],
    queryFn: async () => {
      const response = await fetch(`/api/print-queue?days=${daysAhead}`);
      if (!response.ok) throw new Error('Failed to fetch print queue');
      return response.json();
    },
    staleTime: 1000 * 60 * 5, // 5 minutes
  });

  const updateStatusMutation = useMutation({
    mutationFn: async ({ assignmentId, status }: { assignmentId: string; status: string }) => {
      const response = await fetch(`/api/print-queue/${assignmentId}/status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status }),
      });
      if (!response.ok) {
        throw new Error('Failed to update print status');
      }
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/print-queue'] });
    },
  });

  // Extract all items from grouped data
  const allItems = printQueueData?.groupsByDate.flatMap(group => group.items) ?? [];
  const pendingItems = allItems.filter(item => item.printStatus === 'needs_printing');
  const completedItems = allItems.filter(item => item.printStatus !== 'needs_printing');

  const totalPages = pendingItems.reduce((sum, item) => sum + item.estimatedPages, 0);
  const highPriorityCount = pendingItems.filter(item => item.priority === 'high').length;

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="animate-pulse space-y-4">
            <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded w-64"></div>
            <div className="h-32 bg-gray-300 dark:bg-gray-700 rounded"></div>
            <div className="h-32 bg-gray-300 dark:bg-gray-700 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-4" style={{ background: 'linear-gradient(135deg, var(--background) 0%, var(--surface-secondary) 100%)' }}>
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-bold flex items-center gap-2" style={{ 
              background: 'linear-gradient(135deg, var(--foreground) 0%, var(--primary) 100%)',
              backgroundClip: 'text',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent'
            }}>
              <Printer className="w-7 h-7" style={{ color: 'var(--primary)' }} />
              Print Queue
            </h1>
            <p className="text-muted-foreground mt-1">
              Proactive printing support for tomorrow's assignments
            </p>
          </div>
          
          {/* Days Ahead Selector */}
          <div className="flex items-center gap-2">
            <label className="text-sm font-medium text-foreground">
              Print Range:
            </label>
            <select
              value={daysAhead}
              onChange={(e) => setDaysAhead(parseInt(e.target.value))}
              className="px-3 py-2 border rounded-md bg-card border-border text-foreground"
            >
              <option value={3}>Next 3 days</option>
              <option value={4}>Next 4 days</option>
              <option value={5}>Next 5 days</option>
              <option value={7}>Next week</option>
            </select>
          </div>
        </div>

        {/* Summary Cards */}
        {pendingItems.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <Card className="p-4">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 dark:bg-orange-900 rounded-lg">
                  <Clock className="w-5 h-5 text-orange-600" />
                </div>
                <div>
                  <div className="font-semibold text-lg">{pendingItems.length}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">Items to Print</div>
                </div>
              </div>
            </Card>
            
            <Card className="p-4">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-red-100 dark:bg-red-900 rounded-lg">
                  <AlertTriangle className="w-5 h-5 text-red-600" />
                </div>
                <div>
                  <div className="font-semibold text-lg">{highPriorityCount}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">High Priority</div>
                </div>
              </div>
            </Card>
            
            <Card className="p-4">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                  <FileText className="w-5 h-5 text-blue-600" />
                </div>
                <div>
                  <div className="font-semibold text-lg">~{totalPages}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">Est. Pages</div>
                </div>
              </div>
            </Card>
          </div>
        )}

        {/* Date Range Info */}
        {printQueueData && (
          <div className="mb-4 text-sm text-gray-600 dark:text-gray-400">
            Showing assignments due {new Date(printQueueData.dateRange.from).toLocaleDateString()} - {new Date(printQueueData.dateRange.to).toLocaleDateString()}
          </div>
        )}

        {/* Print Queue Items by Date */}
        {pendingItems.length === 0 ? (
          <Card className="p-8 text-center">
            <Check className="w-12 h-12 text-green-600 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              All Set! 🎉
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              No items need printing in this date range. Try a different range!
            </p>
          </Card>
        ) : (
          <div className="space-y-6">
            {printQueueData?.groupsByDate.map((dateGroup) => (
              <Card key={dateGroup.date} className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <Calendar className="w-5 h-5 text-blue-600" />
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                      Due {new Date(dateGroup.date).toLocaleDateString('en-US', { 
                        weekday: 'long', 
                        month: 'short', 
                        day: 'numeric' 
                      })}
                    </h3>
                  </div>
                  <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
                    <span>{dateGroup.count} items</span>
                    {dateGroup.highPriorityCount > 0 && (
                      <span className="text-red-600 font-medium">
                        {dateGroup.highPriorityCount} high priority
                      </span>
                    )}
                  </div>
                </div>
                
                <div className="grid gap-4">
                  {dateGroup.items.filter(item => item.printStatus === 'needs_printing').map((item) => (
                    <div key={item.id} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <Badge className={`${getPriorityColor(item.priority)} font-medium`}>
                              {item.priority.toUpperCase()}
                            </Badge>
                            <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
                              {item.studentName}
                            </span>
                            {item.subject && (
                              <span className="text-sm text-gray-500">
                                • {item.subject}
                              </span>
                            )}
                          </div>
                          
                          <h3 className="font-semibold text-gray-900 dark:text-white mb-1">
                            {item.title}
                          </h3>
                          
                          <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-3">
                            <span>{getPrintReasonText(item.printReason)}</span>
                            <span>~{item.estimatedPages} page{item.estimatedPages !== 1 ? 's' : ''}</span>
                            {item.courseName && (
                              <span>{item.courseName}</span>
                            )}
                          </div>
                          
                          <div className="flex items-center gap-2">
                            {item.canvasUrl && (
                              <Button
                                size="sm"
                                variant="outline"
                                className="flex items-center gap-2"
                                onClick={() => window.open(item.canvasUrl!, '_blank')}
                              >
                                <ExternalLink className="w-4 h-4" />
                                Open in Canvas
                              </Button>
                            )}
                            
                            <Button
                              size="sm"
                              variant="default"
                              className="bg-green-600 hover:bg-green-700 text-white"
                              onClick={() => updateStatusMutation.mutate({ assignmentId: item.id, status: 'printed' })}
                              disabled={updateStatusMutation.isPending}
                            >
                              <Check className="w-4 h-4 mr-2" />
                              Mark Printed
                            </Button>
                            
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => updateStatusMutation.mutate({ assignmentId: item.id, status: 'skipped' })}
                              disabled={updateStatusMutation.isPending}
                            >
                              Skip
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            ))}
          </div>
        )}

        {/* Completed Items */}
        {completedItems.length > 0 && (
          <div className="mt-8">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
              <BookOpen className="w-5 h-5" />
              Completed ({completedItems.length})
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {completedItems.map((item) => (
                <Card key={item.id} className="p-3 bg-gray-50 dark:bg-gray-800">
                  <div className="flex items-center justify-between">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        {getPrintStatusIcon(item.printStatus)}
                        <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
                          {item.studentName}
                        </span>
                      </div>
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white truncate">
                        {item.title}
                      </h4>
                    </div>
                    
                    {item.printStatus === 'printed' ? (
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => updateStatusMutation.mutate({ assignmentId: item.id, status: 'needs_printing' })}
                      >
                        Undo
                      </Button>
                    ) : (
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => updateStatusMutation.mutate({ assignmentId: item.id, status: 'needs_printing' })}
                      >
                        Restore
                      </Button>
                    )}
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

REGISTER
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Link, useLocation } from "wouter";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Eye, EyeOff, UserPlus, ArrowLeft } from "lucide-react";

// Enhanced registration form schema with comprehensive validation
const registerSchema = z.object({
  firstName: z.string()
    .min(1, "First name is required")
    .max(50, "First name must be less than 50 characters")
    .regex(/^[a-zA-Z\s-']+$/, "First name can only contain letters, spaces, hyphens and apostrophes"),
  lastName: z.string()
    .min(1, "Last name is required")
    .max(50, "Last name must be less than 50 characters")
    .regex(/^[a-zA-Z\s-']+$/, "Last name can only contain letters, spaces, hyphens and apostrophes"),
  email: z.string()
    .min(1, "Email is required")
    .email("Please enter a valid email address")
    .max(100, "Email must be less than 100 characters")
    .toLowerCase()
    .trim(),
  password: z.string()
    .min(8, "Password must be at least 8 characters")
    .max(100, "Password must be less than 100 characters")
    .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
    .regex(/[a-z]/, "Password must contain at least one lowercase letter")
    .regex(/[0-9]/, "Password must contain at least one number"),
  confirmPassword: z.string().min(1, "Please confirm your password"),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

type RegisterForm = z.infer<typeof registerSchema>;

export default function RegisterPage() {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const form = useForm<RegisterForm>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
  });

  const registerMutation = useMutation({
    mutationFn: async (data: RegisterForm) => {
      // Log validation data for debugging
      console.log("[Registration] Submitting form data:", {
        firstName: data.firstName,
        lastName: data.lastName,
        email: data.email,
        passwordLength: data.password.length,
        timestamp: new Date().toISOString()
      });

      // Validate all fields before submission
      const validationErrors: string[] = [];
      
      if (!data.firstName?.trim()) validationErrors.push("First name is empty");
      if (!data.lastName?.trim()) validationErrors.push("Last name is empty");
      if (!data.email?.trim()) validationErrors.push("Email is empty");
      if (!data.password) validationErrors.push("Password is empty");
      
      if (validationErrors.length > 0) {
        const errorMsg = `Client validation failed: ${validationErrors.join(", ")}`;
        console.error("[Registration]", errorMsg);
        throw new Error(errorMsg);
      }

      const { confirmPassword, ...userData } = data;
      
      // Clean and normalize data
      const cleanedData = {
        firstName: userData.firstName.trim(),
        lastName: userData.lastName.trim(),
        email: userData.email.toLowerCase().trim(),
        password: userData.password
      };
      
      console.log("[Registration] Sending cleaned data to server");
      
      try {
        const response = await apiRequest('POST', '/api/register', cleanedData);
        console.log("[Registration] Success response:", response);
        return response;
      } catch (error: any) {
        console.error("[Registration] Server error:", {
          message: error.message,
          status: error.status,
          response: error.response,
          timestamp: new Date().toISOString()
        });
        throw error;
      }
    },
    onSuccess: (response) => {
      console.log("[Registration] Account created successfully:", response);
      toast({
        title: "Registration successful!",
        description: "Your account has been created. Please sign in.",
      });
      navigate("/login");
    },
    onError: (error: any) => {
      console.error("[Registration] Final error handler:", error);
      
      // Parse different error types
      let errorMessage = "Something went wrong. Please try again.";
      
      if (error.message?.includes("email already exists") || error.message?.includes("account with this email")) {
        errorMessage = "An account with this email already exists. Please use a different email or sign in.";
      } else if (error.message?.includes("validation")) {
        errorMessage = error.message;
      } else if (error.message?.includes("network") || error.message?.includes("fetch")) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error.message?.includes("400")) {
        errorMessage = "Invalid registration data. Please check all fields and try again.";
      } else if (error.message?.includes("500")) {
        errorMessage = "Server error. Please try again later.";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Registration failed",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: RegisterForm) => {
    console.log("[Registration] Form submitted with data:", {
      fields: Object.keys(data),
      hasAllFields: !!(data.firstName && data.lastName && data.email && data.password && data.confirmPassword),
      formErrors: form.formState.errors,
      timestamp: new Date().toISOString()
    });
    
    // Additional client-side checks
    if (form.formState.errors && Object.keys(form.formState.errors).length > 0) {
      console.error("[Registration] Form has validation errors:", form.formState.errors);
      return;
    }
    
    registerMutation.mutate(data);
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-6" style={{
      background: 'linear-gradient(135deg, var(--surface) 0%, var(--surface-elevated) 100%)'
    }}>
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <Link href="/" className="inline-flex items-center mb-6 text-decoration-none">
            <div className="w-12 h-12 rounded-xl flex items-center justify-center text-white font-bold mr-3 shadow-lg" style={{
              background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)'
            }}>
              S
            </div>
            <span className="text-3xl font-bold" style={{ color: 'var(--primary)' }}>StudyFlow</span>
          </Link>
          
          <h1 className="text-2xl font-bold mb-2" style={{ color: 'var(--text-primary)' }}>
            Create your account
          </h1>
          <p style={{ color: 'var(--text-secondary)' }}>
            Join StudyFlow to get started with your learning journey
          </p>
        </div>

        {/* Registration Form */}
        <Card className="shadow-xl border-0" style={{
          background: 'var(--surface-elevated)',
          borderColor: 'var(--border-subtle)'
        }}>
          <CardHeader className="space-y-1">
            <CardTitle className="text-xl font-semibold" style={{ color: 'var(--text-primary)' }}>
              Sign up
            </CardTitle>
            <CardDescription style={{ color: 'var(--text-secondary)' }}>
              Fill in your information to create an account
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              {/* First Name */}
              <div className="space-y-2">
                <Label htmlFor="firstName" style={{ color: 'var(--text-primary)' }}>
                  First Name *
                </Label>
                <Input
                  id="firstName"
                  type="text"
                  placeholder="Enter your first name"
                  {...form.register("firstName")}
                  data-testid="input-first-name"
                  style={{
                    background: 'var(--surface)',
                    borderColor: 'var(--border-subtle)',
                    color: 'var(--text-primary)'
                  }}
                />
                {form.formState.errors.firstName && (
                  <p className="text-sm text-red-500" data-testid="error-first-name">
                    {form.formState.errors.firstName.message}
                  </p>
                )}
              </div>

              {/* Last Name */}
              <div className="space-y-2">
                <Label htmlFor="lastName" style={{ color: 'var(--text-primary)' }}>
                  Last Name *
                </Label>
                <Input
                  id="lastName"
                  type="text"
                  placeholder="Enter your last name"
                  {...form.register("lastName")}
                  data-testid="input-last-name"
                  style={{
                    background: 'var(--surface)',
                    borderColor: 'var(--border-subtle)',
                    color: 'var(--text-primary)'
                  }}
                />
                {form.formState.errors.lastName && (
                  <p className="text-sm text-red-500" data-testid="error-last-name">
                    {form.formState.errors.lastName.message}
                  </p>
                )}
              </div>

              {/* Email */}
              <div className="space-y-2">
                <Label htmlFor="email" style={{ color: 'var(--text-primary)' }}>
                  Email Address *
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  {...form.register("email")}
                  data-testid="input-email"
                  style={{
                    background: 'var(--surface)',
                    borderColor: 'var(--border-subtle)',
                    color: 'var(--text-primary)'
                  }}
                />
                {form.formState.errors.email && (
                  <p className="text-sm text-red-500" data-testid="error-email">
                    {form.formState.errors.email.message}
                  </p>
                )}
              </div>

              {/* Password */}
              <div className="space-y-2">
                <Label htmlFor="password" style={{ color: 'var(--text-primary)' }}>
                  Password *
                </Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="Create a password (min. 8 characters)"
                    {...form.register("password")}
                    data-testid="input-password"
                    style={{
                      background: 'var(--surface)',
                      borderColor: 'var(--border-subtle)',
                      color: 'var(--text-primary)',
                      paddingRight: '2.5rem'
                    }}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                    data-testid="button-toggle-password"
                  >
                    {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                  </button>
                </div>
                {form.formState.errors.password && (
                  <p className="text-sm text-red-500" data-testid="error-password">
                    {form.formState.errors.password.message}
                  </p>
                )}
              </div>

              {/* Confirm Password */}
              <div className="space-y-2">
                <Label htmlFor="confirmPassword" style={{ color: 'var(--text-primary)' }}>
                  Confirm Password *
                </Label>
                <div className="relative">
                  <Input
                    id="confirmPassword"
                    type={showConfirmPassword ? "text" : "password"}
                    placeholder="Re-enter your password"
                    {...form.register("confirmPassword")}
                    data-testid="input-confirm-password"
                    style={{
                      background: 'var(--surface)',
                      borderColor: 'var(--border-subtle)',
                      color: 'var(--text-primary)',
                      paddingRight: '2.5rem'
                    }}
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                    data-testid="button-toggle-confirm-password"
                  >
                    {showConfirmPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                  </button>
                </div>
                {form.formState.errors.confirmPassword && (
                  <p className="text-sm text-red-500" data-testid="error-confirm-password">
                    {form.formState.errors.confirmPassword.message}
                  </p>
                )}
              </div>

              {/* Submit Button */}
              <Button
                type="submit"
                className="w-full py-3 font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200"
                disabled={registerMutation.isPending}
                data-testid="button-register"
                style={{
                  background: registerMutation.isPending 
                    ? 'var(--surface-secondary)'
                    : 'linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)'
                }}
              >
                {registerMutation.isPending ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    Creating account...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <UserPlus size={18} />
                    Create Account
                  </div>
                )}
              </Button>
            </form>

            {/* Sign In Link */}
            <div className="mt-6 text-center">
              <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>
                Already have an account?{" "}
                <Link href="/login" className="font-medium hover:underline" style={{ color: 'var(--primary)' }}>
                  Sign in
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Back to Home */}
        <div className="mt-6 text-center">
          <Link 
            href="/" 
            className="inline-flex items-center gap-2 text-sm hover:underline"
            style={{ color: 'var(--text-secondary)' }}
            data-testid="link-back-home"
          >
            <ArrowLeft size={16} />
            Back to Home
          </Link>
        </div>
      </div>
    </div>
  );
}

STUDENT-DASHBOARD
import { useState, useEffect } from 'react';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  RefreshCw, 
  ChevronLeft, 
  ChevronRight, 
  Calendar,
  Home,
  Settings,
  Moon,
  BookOpen,
  FileText,
  Users,
  Utensils,
  Package,
  Car,
  Building2,
  Grid3X3,
  Play,
  Activity,
  UtensilsCrossed,
  ArrowLeft
} from 'lucide-react';
import { Link, useParams, useLocation } from 'wouter';
import { GuidedDayView } from '@/components/GuidedDayView';
import { AssignmentCard } from '@/components/AssignmentCard';
import { FixedBlock } from '@/components/FixedBlock';
import type { Assignment } from '@shared/schema';

export default function StudentDashboard() {
  const params = useParams<{ student: string }>();
  const [, navigate] = useLocation();
  
  // Check authentication first
  const { data: user, isLoading: userLoading } = useQuery({
    queryKey: ['/api/auth/user'],
    retry: false,
  });

  // Redirect if not authenticated
  useEffect(() => {
    if (!userLoading && !user) {
      navigate('/login');
      return;
    }
  }, [user, userLoading, navigate]);

  // Show loading while checking auth
  if (userLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  // Don't render if not authenticated
  if (!user) {
    return null;
  }

  // SECURITY: Only allow access to specific students and only if user is admin
  const allowedStudents = ['abigail', 'khalil'];
  const studentParam = params.student?.toLowerCase();
  
  if (!studentParam || !allowedStudents.includes(studentParam)) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Access Denied</h1>
          <p className="mb-4">Student not found or access not allowed.</p>
          <Link href="/student" className="text-primary underline">← Back to Student Selection</Link>
        </div>
      </div>
    );
  }

  // Capitalize student name for consistency
  const studentName = studentParam.charAt(0).toUpperCase() + studentParam.slice(1);
  const [isGuidedMode, setIsGuidedMode] = useState(false);
  const [selectedDate, setSelectedDate] = useState(() => {
    // Always start with today's date 
    const today = new Date();
    return today.toISOString().split('T')[0];
  });
  const [isDarkMode, setIsDarkMode] = useState(false);
  const queryClient = useQueryClient();

  // Theme toggle functionality
  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDarkMode]);

  const handleHomeClick = () => {
    // Reset to today and overview mode
    setSelectedDate(new Date().toISOString().split('T')[0]);
    setIsGuidedMode(false);
  };

  const handleSettingsClick = () => {
    // For now, just show an alert - can be expanded later
    alert('Settings panel coming soon!');
  };

  // Fetch assignments for today (get assignments due on or before this date)
  const { data: assignments = [], isLoading, refetch } = useQuery({
    queryKey: ['/api/assignments', selectedDate, studentName],
    queryFn: async () => {
      // For scheduling purposes, show assignments due in the next few days
      const currentDate = new Date(selectedDate);
      const targetDate = new Date(currentDate);
      targetDate.setDate(currentDate.getDate() + 2); // Show assignments due within 2 days
      
      const params = new URLSearchParams({
        date: targetDate.toISOString().split('T')[0],
        studentName: studentName
      });
      const response = await fetch(`/api/assignments?${params}`);
      if (!response.ok) throw new Error('Failed to fetch assignments');
      return response.json();
    },
    staleTime: 1000 * 60 * 5, // 5 minutes
  });

  // Fetch schedule template for the student and date
  const { data: scheduleTemplate = [] } = useQuery<any[]>({
    queryKey: ['/api/schedule', studentName, selectedDate],
    staleTime: 1000 * 60 * 5, // 5 minutes
  });

  const handleAssignmentUpdate = () => {
    refetch();
    queryClient.invalidateQueries({ queryKey: ['/api/assignments', selectedDate, studentName] });
  };

  const todayAssignments = assignments as Assignment[];
  
  
  // Date utilities - Fix timezone issue by using UTC
  const selectedDateObj = new Date(selectedDate + 'T12:00:00.000Z'); // Noon UTC avoids timezone issues
  const today = new Date();
  const isToday = selectedDate === today.toISOString().split('T')[0];
  const isWeekend = selectedDateObj.getDay() === 0 || selectedDateObj.getDay() === 6;
  const dayName = selectedDateObj.toLocaleDateString('en-US', { weekday: 'long', timeZone: 'UTC' });
  const dateDisplay = selectedDateObj.toLocaleDateString('en-US', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    timeZone: 'UTC'
  });
  
  // Debug current date calculation
  console.log('🗓️ Date Debug:', {
    selectedDate,
    selectedDateObj: selectedDateObj.toString(),
    dayName,
    dateDisplay,
    today: new Date().toISOString().split('T')[0]
  });

  // Schedule template for the selected day
  const isThursday = selectedDateObj.getDay() === 4;
  const weekdayName = selectedDateObj.toLocaleDateString('en-US', { weekday: 'long' });

  // Date navigation functions
  const goToPreviousDay = () => {
    const prevDay = new Date(selectedDateObj);
    prevDay.setDate(prevDay.getDate() - 1);
    setSelectedDate(prevDay.toISOString().split('T')[0]);
  };

  const goToNextDay = () => {
    const nextDay = new Date(selectedDateObj);
    nextDay.setDate(nextDay.getDate() + 1);
    setSelectedDate(nextDay.toISOString().split('T')[0]);
  };

  const goToToday = () => {
    setSelectedDate(new Date().toISOString().split('T')[0]);
  };

  // Use real schedule template data from database (fix field mapping)
  const allScheduleBlocks = scheduleTemplate.map((block) => ({
    id: block.id,
    title: block.subject,
    blockType: block.blockType?.toLowerCase() || 'unknown',
    startTime: block.startTime?.substring(0, 5) || '00:00', // Remove seconds from HH:MM:SS
    endTime: block.endTime?.substring(0, 5) || '00:00',
    blockNumber: block.blockNumber,
    subject: block.subject
  }));

  // Separate Bible blocks from other fixed blocks using real data
  const bibleBlocks = allScheduleBlocks.filter((block) => block.blockType === 'bible');
  const fixedBlocks = allScheduleBlocks.filter((block) => 
    ['travel', 'co-op', 'prep/load', 'movement', 'lunch'].includes(block.blockType)
  );
  const assignmentBlocks = allScheduleBlocks.filter((block) => block.blockType === 'assignment');

  // Fill assignment blocks with available assignments (round-robin if more blocks than assignments)
  const populatedAssignmentBlocks = assignmentBlocks.map((block, index) => {
    const assignmentIndex = assignments.length > 0 ? index % assignments.length : -1;
    const assignment = assignmentIndex >= 0 ? assignments[assignmentIndex] : null;
    
    return {
      ...block,
      assignment: assignment
    };
  });

  if (isWeekend) {
    return (
      <div className="min-h-screen p-6" style={{ background: 'linear-gradient(135deg, var(--background) 0%, var(--surface-secondary) 100%)' }}>
        <div className="max-w-4xl mx-auto">
          <div className="text-center py-12">
            <div className="text-6xl mb-4">🌟</div>
            <h1 className="text-3xl font-bold text-foreground mb-4">
              Happy {dayName}, {studentName}!
            </h1>
            <p className="text-lg text-muted-foreground mb-6">
              It's the weekend - time to recharge and do what you love!
            </p>
            <p className="text-muted-foreground">
              Your assignments will be waiting for you on Monday. Enjoy your break! 🎉
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="min-h-screen p-6" style={{ background: 'linear-gradient(135deg, var(--background) 0%, var(--surface-secondary) 100%)' }}>
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold text-foreground">Welcome, {studentName}!</h1>
              <p className="text-lg text-muted-foreground mt-1">{dateDisplay}</p>
            </div>
          </div>
          <Card className="bg-card border border-border">
            <CardContent className="p-8 text-center">
              <div className="text-muted-foreground">Loading schedule...</div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-4 sm:p-6" style={{ background: 'linear-gradient(135deg, var(--background) 0%, var(--surface-secondary) 100%)' }}>
      <div className="max-w-5xl mx-auto">
        
        {/* Header - Full navigation for Overview, minimal for Guided */}
        {isGuidedMode ? (
          // Minimal header for Guided mode - just theme toggle
          <div className="flex justify-end mb-4">
            <Button 
              variant="ghost" 
              data-testid="button-theme"
              onClick={() => setIsDarkMode(!isDarkMode)}
              className="rounded-full hover:bg-muted/60 transition-all h-10 w-10 p-0"
              title="Toggle theme"
            >
              <Moon className="h-5 w-5" />
            </Button>
          </div>
        ) : (
          // Full header for Overview mode
          <>
            <div className="flex items-center justify-between mb-6 px-4">
              <h1 className="text-2xl sm:text-3xl font-semibold text-foreground tracking-tight" data-testid="student-name">
                {studentName}
              </h1>
              <div className="flex items-center gap-3">
                <Link href="/student">
                  <Button 
                    variant="ghost" 
                    data-testid="button-student-selection"
                    className="rounded-full hover:bg-muted/60 transition-all duration-200 hover:scale-105 h-12 w-12 p-0 [&_svg]:!size-6"
                    title="Back to Student Selection"
                  >
                    <ArrowLeft className="h-6 w-6" />
                  </Button>
                </Link>
                <Button 
                  variant="ghost" 
                  data-testid="button-home"
                  onClick={handleHomeClick}
                  className="rounded-full hover:bg-muted/60 transition-all duration-200 hover:scale-105 h-12 w-12 p-0 [&_svg]:!size-6"
                  title="Today's Overview"
                >
                  <Home className="h-6 w-6" />
                </Button>
                <Button 
                  variant="ghost" 
                  data-testid="button-settings"
                  onClick={handleSettingsClick}
                  className="rounded-full hover:bg-muted/60 transition-all duration-200 hover:scale-105 h-12 w-12 p-0 [&_svg]:!size-6"
                >
                  <Settings className="h-6 w-6" />
                </Button>
                <Button 
                  variant="ghost" 
                  data-testid="button-theme"
                  onClick={() => setIsDarkMode(!isDarkMode)}
                  className="rounded-full hover:bg-muted/60 transition-all duration-200 hover:scale-105 h-12 w-12 p-0 [&_svg]:!size-6"
                >
                  <Moon className="h-6 w-6" />
                </Button>
              </div>
            </div>

            {/* Second row - Date/Co-op + Mode toggles */}
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6 px-4">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2 text-foreground">
                  <Calendar className="h-5 w-5" />
                  <span data-testid="date-display" className="text-base font-semibold">{dateDisplay}</span>
                </div>
                {isThursday && (
                  <Badge variant="secondary" className="bg-green-50 text-green-700 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800 rounded-full px-4 py-1.5 text-sm font-medium">
                    Co-op Day
                  </Badge>
                )}
              </div>
              
              <div className="flex flex-col sm:flex-row items-start sm:items-center gap-3 w-full sm:w-auto">
                {/* Date Navigation for testing (will be removed later) */}
                <div className="flex items-center gap-0 bg-muted/50 rounded-xl p-1.5">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={goToPreviousDay}
                    className="h-10 w-10 p-0 rounded-lg hover:bg-background/80"
                    data-testid="button-previous-day"
                  >
                    <ChevronLeft className="h-5 w-5" />
                  </Button>
                  <div className="px-4 text-base font-semibold min-w-[90px] text-center">
                    {isToday ? 'Today' : dayName}
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={goToNextDay}
                    className="h-10 w-10 p-0 rounded-lg hover:bg-background/80"
                    data-testid="button-next-day"
                  >
                    <ChevronRight className="h-5 w-5" />
                  </Button>
                </div>

                {/* Overview/Guided Mode Toggle */}
                <div className="flex items-center bg-muted/50 rounded-xl p-1.5">
                  <Button
                    variant={!isGuidedMode ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setIsGuidedMode(false)}
                    className="text-base flex items-center gap-2 rounded-lg px-5 py-2.5 transition-all font-semibold"
                    data-testid="button-overview-mode"
                  >
                    <Grid3X3 className="h-5 w-5" />
                    <span className="hidden sm:inline">Overview</span>
                    <span className="sm:hidden">Overview</span>
                  </Button>
                  <Button
                    variant={isGuidedMode ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setIsGuidedMode(true)}
                    className="text-base flex items-center gap-2 rounded-lg px-5 py-2.5 transition-all font-semibold"
                    data-testid="button-guided-mode"
                  >
                    <Play className="h-5 w-5" />
                    <span className="hidden sm:inline">Guided</span>
                    <span className="sm:hidden">Guided</span>
                  </Button>
                </div>
              </div>
            </div>
          </>
        )}

        {/* Content */}
        {isGuidedMode ? (
          <div className="space-y-4">
            <GuidedDayView
              assignments={todayAssignments}
              studentName={studentName}
              selectedDate={selectedDate}
              scheduleTemplate={scheduleTemplate}
              onAssignmentUpdate={handleAssignmentUpdate}
              onModeToggle={() => setIsGuidedMode(false)}
            />
          </div>
        ) : (
          <div className="space-y-4">
            {/* Progress Bar - Apple Fitness style */}
            <div className="bg-white dark:bg-card rounded-xl p-4 border border-gray-200 dark:border-border/50">
              <div className="flex justify-between text-sm mb-2">
                <span className="font-medium text-muted-foreground">Daily Progress</span>
                <span className="font-medium text-muted-foreground">0%</span>
              </div>
              <div className="w-full bg-gray-100 dark:bg-muted rounded-full h-1">
                <div className="bg-blue-500 h-1 rounded-full transition-all duration-500" style={{ width: '0%' }}></div>
              </div>
            </div>

            {/* Schedule Card - Compact Apple style */}
            <Card className="bg-white dark:bg-card rounded-xl border border-gray-200 dark:border-border/50">
              <CardContent className="p-4">
                <h3 className="text-lg font-semibold text-foreground mb-4">
                  {isToday ? "Today's" : `${dayName}'s`} Schedule
                </h3>
                  
                  <div className="space-y-1">
                    {/* Show ALL schedule blocks in chronological order with compact Apple-style layout */}
                    {allScheduleBlocks
                      .sort((a, b) => a.startTime.localeCompare(b.startTime))
                      .map((block, index) => {
                        // Get appropriate icon component with consistent colored pill containers
                        const getBlockIcon = (blockType: string) => {
                          const iconClass = "h-4 w-4 text-white";
                          const pillBg = 'bg-gradient-to-br from-blue-500 to-blue-600'; // Same background for ALL pills
                          
                          let icon;
                          switch(blockType) {
                            case 'bible': 
                              icon = <BookOpen className={iconClass} />;
                              break;
                            case 'assignment': 
                              icon = <FileText className={iconClass} />;
                              break;
                            case 'movement': 
                              icon = <Activity className={iconClass} />;
                              break;
                            case 'lunch':
                            case 'prep/load': 
                              icon = <Utensils className={iconClass} />;
                              break;
                            case 'travel': 
                              icon = <Car className={iconClass} />;
                              break;
                            case 'co-op': 
                              icon = <Building2 className={iconClass} />;
                              break;
                            default: 
                              icon = <FileText className={iconClass} />;
                          }
                          
                          return (
                            <div className={`p-2 rounded-full ${pillBg}`}>
                              {icon}
                            </div>
                          );
                        };
                        
                        const formatTime = (start: string, end: string) => {
                          const formatTimeString = (timeStr: string) => {
                            if (!timeStr || timeStr === '00:00') return '12:00 AM';
                            const [hours, minutes] = timeStr.split(':');
                            const hour = parseInt(hours);
                            const ampm = hour >= 12 ? 'PM' : 'AM';
                            const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
                            return `${displayHour}:${minutes} ${ampm}`;
                          };
                          return `${formatTimeString(start)} – ${formatTimeString(end)}`;
                        };
                        
                        // Get block title and details
                        let blockTitle = block.title;
                        let blockDetails = '';
                        
                        if (block.blockType === 'assignment') {
                          // Use round-robin assignment from our populated blocks
                          const populatedBlock = populatedAssignmentBlocks.find(pb => pb.id === block.id);
                          if (populatedBlock && populatedBlock.assignment) {
                            blockTitle = populatedBlock.assignment.title; // Show assignment title as the main title
                            blockDetails = ''; // No subtitle needed
                          } else {
                            blockTitle = 'Open Assignment Block';
                            blockDetails = '';
                          }
                        } else if (block.blockType === 'bible') {
                          blockTitle = 'Bible';
                          blockDetails = 'Daily Bible Reading';
                        }
                        
                        return (
                          <div 
                            key={block.id} 
                            className="group flex items-center justify-between py-2.5 px-3 hover:bg-gray-50 dark:hover:bg-muted/30 rounded-lg transition-colors duration-150"
                          >
                            <div className="flex items-center gap-3 flex-1 min-w-0">
                              <div className="flex-shrink-0">
                                {getBlockIcon(block.blockType)}
                              </div>
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center gap-2">
                                  <span className="font-semibold text-gray-900 dark:text-foreground text-base truncate">{blockTitle}</span>
                                  {blockDetails && (
                                    <>
                                      <span className="text-gray-400">—</span>
                                      <span className="text-gray-600 dark:text-muted-foreground text-sm truncate">{blockDetails}</span>
                                    </>
                                  )}
                                </div>
                                <div className="flex items-center justify-between mt-0.5">
                                  <span className="text-gray-500 dark:text-muted-foreground text-sm">
                                    {formatTime(block.startTime, block.endTime)}
                                  </span>
                                  <Badge variant="outline" className="text-xs px-2 py-0.5 bg-gray-50 dark:bg-muted/30 text-gray-600 dark:text-muted-foreground border-gray-200 dark:border-border/50 rounded-md">
                                    not started
                                  </Badge>
                                </div>
                              </div>
                            </div>
                          </div>
                        );
                      })}
                  </div>
                </CardContent>
              </Card>
          </div>
        )}
      </div>
    </div>
  );
}

STUDENT-SELECTION
import { Link, useLocation } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { useEffect } from 'react';

export default function StudentSelection() {
  const [, navigate] = useLocation();
  
  // Check authentication
  const { data: user, isLoading } = useQuery({
    queryKey: ['/api/auth/user'],
    retry: false,
  });

  // Redirect if not authenticated
  useEffect(() => {
    if (!isLoading && !user) {
      navigate('/login');
      return;
    }
  }, [user, isLoading, navigate]);

  // Show loading while checking auth
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  // Don't render if not authenticated
  if (!user) {
    return null;
  }

  // Get current date
  const today = new Date();
  const dateOptions: Intl.DateTimeFormatOptions = { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  };
  const formattedDate = today.toLocaleDateString('en-US', dateOptions);

  // Get time-based greeting
  const hour = today.getHours();
  let greeting = 'Good morning!';
  if (hour >= 12 && hour < 17) {
    greeting = 'Good afternoon!';
  } else if (hour >= 17) {
    greeting = 'Good evening!';
  }

  return (
    <div className="min-h-screen" style={{ background: 'linear-gradient(135deg, var(--surface-primary) 0%, var(--surface-secondary) 100%)' }}>
      {/* Header */}
      <header className="sticky top-0 z-100 backdrop-blur-sm border-b" style={{ 
        background: 'rgba(248, 249, 250, 0.8)', 
        borderColor: 'var(--border-subtle)' 
      }}>
        <div className="max-w-6xl mx-auto flex justify-between items-center px-8 py-4">
          <Link href="/" className="flex items-center text-decoration-none">
            <div className="w-9 h-9 rounded-xl flex items-center justify-center text-white font-semibold mr-3 shadow-sm" style={{
              background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%)'
            }}>
              S
            </div>
            <span className="text-xl font-bold" style={{ color: 'var(--primary)' }}>StudyFlow</span>
          </Link>
          <Link href="/admin" className="text-sm font-medium px-4 py-2 rounded-lg transition-all duration-200 text-decoration-none" style={{
            color: 'var(--text-secondary)'
          }} onMouseEnter={(e) => {
            (e.target as HTMLElement).style.background = 'var(--primary-subtle)';
            (e.target as HTMLElement).style.color = 'var(--primary)';
          }} onMouseLeave={(e) => {
            (e.target as HTMLElement).style.background = 'transparent';
            (e.target as HTMLElement).style.color = 'var(--text-secondary)';
          }}>
            Admin
          </Link>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-8 py-16">
        {/* Welcome Section */}
        <div className="text-center rounded-2xl p-8 mb-12 shadow-sm border" style={{
          background: 'var(--surface-elevated)',
          borderColor: 'var(--border-subtle)'
        }}>
          <div className="text-sm font-medium uppercase tracking-wide mb-2" style={{
            color: 'var(--text-tertiary)',
            letterSpacing: '0.05em'
          }}>
            {formattedDate}
          </div>
          <div className="text-xl font-semibold" style={{
            background: 'linear-gradient(135deg, var(--primary) 0%, var(--status-progress) 100%)',
            backgroundClip: 'text',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent'
          }}>
            {greeting} Let's make it a great day!
          </div>
        </div>

        {/* Students Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
          {/* Abigail */}
          <Link href="/student/abigail">
            <div className="group cursor-pointer">
              <div className="rounded-3xl p-8 transition-all duration-300 border relative overflow-hidden shadow-sm hover:shadow-xl hover:-translate-y-1" style={{
                background: 'var(--surface-elevated)',
                borderColor: 'var(--border-subtle)'
              }} onMouseEnter={(e) => {
                e.currentTarget.style.borderColor = 'var(--primary-light)';
              }} onMouseLeave={(e) => {
                e.currentTarget.style.borderColor = 'var(--border-subtle)';
              }}>
                {/* Top border accent */}
                <div className="absolute top-0 left-0 right-0 h-1" style={{
                  background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%)'
                }}></div>

                {/* Student Header */}
                <div className="flex items-center mb-6">
                  <div className="w-16 h-16 rounded-full flex items-center justify-center text-white text-2xl font-bold mr-4 shadow-md" style={{
                    background: 'linear-gradient(135deg, #844FC1 0%, #9D6DD1 100%)'
                  }}>
                    A
                  </div>
                  <div>
                    <h3 className="text-2xl font-semibold mb-1" style={{ color: 'var(--text-primary)' }}>
                      Abigail
                    </h3>
                  </div>
                </div>

                {/* Status Message */}
                <div className="mb-6">
                  <div className="text-sm text-center p-3 rounded-lg" style={{
                    color: 'var(--text-secondary)',
                    background: 'var(--surface-secondary)'
                  }}>
                    You're doing amazing! Keep it up!
                  </div>
                </div>

                {/* Action Button */}
                <button className="w-full py-4 px-8 rounded-xl text-white font-semibold text-lg transition-all duration-200 flex items-center justify-center gap-2 shadow-md hover:shadow-lg hover:-translate-y-0.5" style={{
                  background: 'radial-gradient(circle, #844FC1 30%, #3B86D1 100%)'
                }} data-testid="button-select-abigail">
                  Let's Go!
                </button>
              </div>
            </div>
          </Link>

          {/* Khalil */}
          <Link href="/student/khalil">
            <div className="group cursor-pointer">
              <div className="rounded-3xl p-8 transition-all duration-300 border relative overflow-hidden shadow-sm hover:shadow-xl hover:-translate-y-1" style={{
                background: 'var(--surface-elevated)',
                borderColor: 'var(--border-subtle)'
              }} onMouseEnter={(e) => {
                e.currentTarget.style.borderColor = 'var(--primary-light)';
              }} onMouseLeave={(e) => {
                e.currentTarget.style.borderColor = 'var(--border-subtle)';
              }}>
                {/* Top border accent */}
                <div className="absolute top-0 left-0 right-0 h-1" style={{
                  background: 'linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%)'
                }}></div>

                {/* Student Header */}
                <div className="flex items-center mb-6">
                  <div className="w-16 h-16 rounded-full flex items-center justify-center text-white text-2xl font-bold mr-4 shadow-md" style={{
                    background: 'linear-gradient(135deg, #3B86D1 0%, #60A5FA 100%)'
                  }}>
                    K
                  </div>
                  <div>
                    <h3 className="text-2xl font-semibold mb-1" style={{ color: 'var(--text-primary)' }}>
                      Khalil
                    </h3>
                  </div>
                </div>

                {/* Status Message */}
                <div className="mb-6">
                  <div className="text-sm text-center p-3 rounded-lg" style={{
                    color: 'var(--text-secondary)',
                    background: 'var(--surface-secondary)'
                  }}>
                    Ready for another great learning day!
                  </div>
                </div>

                {/* Action Button */}
                <button className="w-full py-4 px-8 rounded-xl text-white font-semibold text-lg transition-all duration-200 flex items-center justify-center gap-2 shadow-md hover:shadow-lg hover:-translate-y-0.5" style={{
                  background: 'radial-gradient(circle, #3B86D1 30%, #844FC1 100%)'
                }} data-testid="button-select-khalil">
                  Let's Go!
                </button>
              </div>
            </div>
          </Link>
        </div>
      </main>

      {/* Footer */}
      <footer className="text-center pb-8" style={{ color: 'var(--text-tertiary)' }}>
        <div className="text-sm">StudyFlow • Built for focused learning</div>
      </footer>
    </div>
  );
}

ADMIN-PANEL
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { CheckCircle, Circle, RefreshCw, Search, Filter, Clock, AlertCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import type { Assignment } from '@shared/schema';

export default function AdminPanel() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedStudent, setSelectedStudent] = useState<string>('Abigail');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [dateFilter, setDateFilter] = useState<string>('upcoming');

  // Get all assignments for the selected student
  const { data: assignments = [], isLoading } = useQuery<Assignment[]>({
    queryKey: ['/api/assignments', selectedStudent],
    queryFn: async () => {
      const response = await apiRequest('GET', `/api/assignments?studentName=${selectedStudent}`);
      return await response.json();
    }
  });

  // Update assignment completion status
  const updateAssignmentMutation = useMutation({
    mutationFn: async ({ id, completionStatus }: { id: string; completionStatus: string }) => {
      const response = await apiRequest('PATCH', `/api/assignments/${id}`, { completionStatus });
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] });
      toast({
        title: "Assignment Updated",
        description: "Assignment status has been updated successfully."
      });
    },
    onError: (error) => {
      toast({
        title: "Update Failed",
        description: "Failed to update assignment status.",
        variant: "destructive"
      });
    }
  });

  // Smart date filtering helper
  const getDateFilteredAssignments = (assignments: Assignment[]) => {
    const now = new Date();
    const currentWeek = new Date(now);
    currentWeek.setDate(now.getDate() - now.getDay()); // Start of current week
    
    const threeWeeksOut = new Date(now);
    threeWeeksOut.setDate(now.getDate() + 21); // 3 weeks from now
    
    switch (dateFilter) {
      case 'upcoming':
        // Current week + next 3 weeks
        return assignments.filter(assignment => {
          if (!assignment.dueDate && !assignment.scheduledDate) return true; // Include assignments without dates
          
          const assignmentDate = assignment.dueDate ? new Date(assignment.dueDate) : 
                                assignment.scheduledDate ? new Date(assignment.scheduledDate) : null;
          
          if (!assignmentDate) return true;
          
          return assignmentDate >= currentWeek && assignmentDate <= threeWeeksOut;
        });
      
      case 'overdue':
        return assignments.filter(assignment => {
          if (!assignment.dueDate) return false;
          const dueDate = new Date(assignment.dueDate);
          return dueDate < now && assignment.completionStatus === 'pending';
        });
      
      case 'this-week':
        const endOfWeek = new Date(currentWeek);
        endOfWeek.setDate(currentWeek.getDate() + 6);
        return assignments.filter(assignment => {
          const assignmentDate = assignment.dueDate ? new Date(assignment.dueDate) : 
                                assignment.scheduledDate ? new Date(assignment.scheduledDate) : null;
          if (!assignmentDate) return false;
          return assignmentDate >= currentWeek && assignmentDate <= endOfWeek;
        });
        
      case 'all':
      default:
        return assignments;
    }
  };

  // Filter assignments based on search, status, and smart date filtering
  const filteredAssignments = Array.isArray(assignments) ? getDateFilteredAssignments(assignments).filter(assignment => {
    const matchesSearch = assignment.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         assignment.subject?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = filterStatus === 'all' || 
                         assignment.completionStatus === filterStatus;
    
    return matchesSearch && matchesStatus;
  }) : [];

  // Group assignments by completion status - with safety check
  const pendingCount = Array.isArray(assignments) ? assignments.filter(a => a.completionStatus === 'pending').length : 0;
  const completedCount = Array.isArray(assignments) ? assignments.filter(a => a.completionStatus === 'completed').length : 0;
  const needsMoreTimeCount = Array.isArray(assignments) ? assignments.filter(a => a.completionStatus === 'needs_more_time').length : 0;
  const stuckCount = Array.isArray(assignments) ? assignments.filter(a => a.completionStatus === 'stuck').length : 0;

  const handleStatusUpdate = (assignmentId: string, newStatus: string) => {
    updateAssignmentMutation.mutate({ id: assignmentId, completionStatus: newStatus });
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      pending: { label: 'Pending', variant: 'outline' as const, icon: Circle },
      completed: { label: 'Done', variant: 'default' as const, icon: CheckCircle },
      needs_more_time: { label: 'Need More Time', variant: 'secondary' as const, icon: Clock },
      stuck: { label: 'Stuck', variant: 'destructive' as const, icon: AlertCircle }
    };
    
    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;
    const Icon = config.icon;
    
    return (
      <Badge variant={config.variant} className="flex items-center gap-1">
        <Icon className="h-3 w-3" />
        {config.label}
      </Badge>
    );
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'No due date';
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric'
    });
  };

  return (
    <div className="min-h-screen" style={{ background: 'linear-gradient(135deg, var(--background) 0%, var(--surface-secondary) 100%)' }}>
      <div className="max-w-7xl mx-auto p-6">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2" style={{ 
            background: 'linear-gradient(135deg, var(--foreground) 0%, var(--primary) 100%)',
            backgroundClip: 'text',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent'
          }}>Assignment Management</h1>
          <p className="text-muted-foreground">
            Manage assignment completion status to control what appears in daily planning
          </p>
        </div>

        {/* Controls */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Controls</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              {/* Student Selection */}
              <div>
                <label className="text-sm font-medium mb-2 block">Student</label>
                <Select value={selectedStudent} onValueChange={setSelectedStudent}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Abigail">Abigail</SelectItem>
                    <SelectItem value="Khalil">Khalil</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Search */}
              <div>
                <label className="text-sm font-medium mb-2 block">Search</label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search assignments..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>

              {/* Status Filter */}
              <div>
                <label className="text-sm font-medium mb-2 block">Filter by Status</label>
                <Select value={filterStatus} onValueChange={setFilterStatus}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Statuses</SelectItem>
                    <SelectItem value="pending">Pending Only</SelectItem>
                    <SelectItem value="completed">Done Only</SelectItem>
                    <SelectItem value="needs_more_time">Need More Time Only</SelectItem>
                    <SelectItem value="stuck">Stuck Only</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Date Filter */}
              <div>
                <label className="text-sm font-medium mb-2 block">Date Range</label>
                <Select value={dateFilter} onValueChange={setDateFilter}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="upcoming">📅 Next 3 Weeks</SelectItem>
                    <SelectItem value="this-week">📆 This Week Only</SelectItem>
                    <SelectItem value="overdue">⚠️ Overdue Items</SelectItem>
                    <SelectItem value="all">📋 All Assignments</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Summary Stats */}
              <div>
                <label className="text-sm font-medium mb-2 block">Summary</label>
                <div className="text-sm space-y-1">
                  <div>Pending: <span className="font-semibold">{pendingCount}</span></div>
                  <div>Done: <span className="font-semibold text-green-600">{completedCount}</span></div>
                  <div>Need More Time: <span className="font-semibold text-blue-600">{needsMoreTimeCount}</span></div>
                  <div>Stuck: <span className="font-semibold text-red-600">{stuckCount}</span></div>
                  <div className="text-xs text-muted-foreground border-t pt-1 mt-1">
                    Total: {Array.isArray(assignments) ? assignments.length : 0}
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Assignment List */}
        <Card>
          <CardHeader>
            <CardTitle>
              Assignments for {selectedStudent}
              <span className="text-sm font-normal text-muted-foreground ml-2">
                ({filteredAssignments.length} of {Array.isArray(assignments) ? assignments.length : 0})
              </span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="text-center py-8">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4 text-muted-foreground" />
                <p className="text-muted-foreground">Loading assignments...</p>
              </div>
            ) : filteredAssignments.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-muted-foreground">No assignments found matching your criteria.</p>
              </div>
            ) : (
              <div className="space-y-3">
                {filteredAssignments.map((assignment) => (
                  <div 
                    key={assignment.id}
                    className="border rounded-lg p-4 hover:bg-muted/50 transition-colors"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="font-semibold text-foreground truncate">
                            {assignment.title}
                          </h3>
                          {getStatusBadge(assignment.completionStatus || 'pending')}
                        </div>
                        
                        <div className="flex items-center gap-4 text-sm text-muted-foreground">
                          <span>{assignment.courseName || assignment.subject || 'No course'}</span>
                          <span>Due: {formatDate(assignment.dueDate ? assignment.dueDate.toString() : null)}</span>
                        </div>
                      </div>

                      <div className="flex items-center gap-2 ml-4">
                        <Select
                          value={assignment.completionStatus || 'pending'}
                          onValueChange={(value) => handleStatusUpdate(assignment.id, value)}
                        >
                          <SelectTrigger className="w-32">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pending">Pending</SelectItem>
                            <SelectItem value="completed">Done</SelectItem>
                            <SelectItem value="needs_more_time">Need More Time</SelectItem>
                            <SelectItem value="stuck">Stuck</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}