-- StudyFlow Production Database Migration Script
-- Generated: 2025-08-27 - CRITICAL for Deployment Success
-- This script ensures production database matches development exactly

-- ========================================
-- STEP 1: VERIFY EXISTING TABLES
-- ========================================
-- Run these queries to check what already exists in production:

-- Check existing tables:
-- SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;

-- Check existing indexes:
-- SELECT tablename, indexname FROM pg_indexes WHERE schemaname = 'public' ORDER BY tablename;

-- ========================================
-- STEP 2: CORE TABLES (Create if missing)
-- ========================================

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    username text NOT NULL UNIQUE,
    email text NOT NULL UNIQUE,
    password text NOT NULL,
    first_name text,
    last_name text,
    is_active boolean DEFAULT true,
    created_at timestamp DEFAULT now(),
    updated_at timestamp DEFAULT now(),
    role varchar(20) DEFAULT 'student'
);

-- Sessions table (for authentication)
CREATE TABLE IF NOT EXISTS sessions (
    sid varchar PRIMARY KEY,
    sess jsonb NOT NULL,
    expire timestamp NOT NULL
);

-- Assignments table (main student data)
CREATE TABLE IF NOT EXISTS assignments (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id text NOT NULL,
    title text NOT NULL,
    subject text,
    course_name text,
    instructions text,
    due_date timestamp,
    scheduled_date text,
    scheduled_block integer,
    block_start text,
    block_end text,
    actual_estimated_minutes integer DEFAULT 30,
    completion_status text DEFAULT 'pending',
    block_type text DEFAULT 'assignment',
    is_assignment_block boolean DEFAULT true,
    priority text DEFAULT 'B',
    difficulty text DEFAULT 'medium',
    time_spent integer DEFAULT 0,
    notes text,
    created_at timestamp DEFAULT now(),
    updated_at timestamp DEFAULT now(),
    canvas_id integer,
    canvas_instance integer,
    is_canvas_import boolean DEFAULT false,
    canvas_category text,
    submission_types text[] DEFAULT ARRAY[]::text[],
    points_value integer,
    available_from timestamp,
    available_until timestamp,
    is_recurring boolean DEFAULT false,
    academic_year text,
    confidence_score text,
    needs_printing boolean DEFAULT false,
    print_status text DEFAULT 'not_needed',
    print_reason text,
    printed_at timestamp,
    canvas_url text,
    canvas_course_id integer
);

-- Bible curriculum table
CREATE TABLE IF NOT EXISTS bible_curriculum (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    week_number integer NOT NULL,
    day_of_week integer,
    reading_title text,
    reading_type text,
    completed boolean DEFAULT false,
    completed_at timestamp
);

-- Bible curriculum position tracking
CREATE TABLE IF NOT EXISTS bible_curriculum_position (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    student_name varchar(100) NOT NULL UNIQUE,
    current_week integer NOT NULL DEFAULT 1,
    current_day integer NOT NULL DEFAULT 1,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

-- Schedule template table
CREATE TABLE IF NOT EXISTS schedule_template (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    student_name text NOT NULL,
    weekday text NOT NULL,
    block_number integer,
    start_time text NOT NULL,
    end_time text NOT NULL,
    subject text NOT NULL,
    block_type text NOT NULL
);

-- Progress sessions table
CREATE TABLE IF NOT EXISTS progress_sessions (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    assignment_id uuid,
    session_type text DEFAULT 'focus',
    started_at timestamp DEFAULT now(),
    completed_at timestamp,
    time_spent integer,
    difficulty text,
    notes text,
    needs_help boolean DEFAULT false,
    created_at timestamp DEFAULT now()
);

-- ========================================
-- STEP 3: CONSTRAINTS AND FOREIGN KEYS
-- ========================================

-- Add foreign key constraints (if not exists)
DO $$ 
BEGIN
    -- Progress sessions to assignments foreign key
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'progress_sessions_assignment_id_assignments_id_fk'
    ) THEN
        ALTER TABLE progress_sessions 
        ADD CONSTRAINT progress_sessions_assignment_id_assignments_id_fk 
        FOREIGN KEY (assignment_id) REFERENCES assignments(id) ON DELETE NO ACTION;
    END IF;
    
    -- Add check constraints for enums
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.check_constraints 
        WHERE constraint_name = 'assignments_print_status_check'
    ) THEN
        ALTER TABLE assignments 
        ADD CONSTRAINT assignments_print_status_check 
        CHECK (print_status IN ('not_needed', 'needs_printing', 'printed', 'skipped'));
    END IF;
END $$;

-- ========================================
-- STEP 4: PERFORMANCE INDEXES (CRITICAL)
-- ========================================

-- Core performance indexes - MUST exist for production
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_assignments_user_id ON assignments(user_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_assignments_scheduled_date ON assignments(scheduled_date);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_assignments_user_date ON assignments(user_id, scheduled_date);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_assignments_completion_status ON assignments(completion_status);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_assignments_canvas_id ON assignments(canvas_id) WHERE canvas_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_session_expire ON sessions(expire);

-- ========================================
-- STEP 5: CRITICAL DATA VERIFICATION
-- ========================================

-- These queries MUST return the expected counts in production:

-- Bible curriculum: Should return 310 rows, weeks 1-52
-- SELECT COUNT(*) as total_rows, MIN(week_number) as min_week, MAX(week_number) as max_week FROM bible_curriculum;

-- Schedule templates: Should return 103 rows
-- SELECT COUNT(*) as total_templates FROM schedule_template;

-- Bible curriculum position: Should have Abigail and Khalil entries
-- SELECT student_name, current_week, current_day FROM bible_curriculum_position ORDER BY student_name;

-- Assignments: Should have 117 total (Abigail: 24, Khalil: 93)
-- SELECT COUNT(*) as total, 
--        COUNT(CASE WHEN user_id = 'abigail-user' THEN 1 END) as abigail_count,
--        COUNT(CASE WHEN user_id = 'khalil-user' THEN 1 END) as khalil_count 
-- FROM assignments;

-- ========================================
-- STEP 6: POST-MIGRATION VERIFICATION
-- ========================================

-- Run these tests after migration to ensure everything works:

-- Test 1: Assignment query performance (should be < 1ms)
-- EXPLAIN ANALYZE SELECT * FROM assignments 
-- WHERE user_id = 'khalil-user' AND scheduled_date = '2025-08-27' 
-- ORDER BY scheduled_block;

-- Test 2: Bible curriculum current reading
-- SELECT bc.reading_title, bcp.current_week, bcp.current_day 
-- FROM bible_curriculum bc
-- JOIN bible_curriculum_position bcp ON bc.week_number = bcp.current_week 
--                                    AND bc.day_of_week = bcp.current_day
-- WHERE bcp.student_name = 'Abigail' AND bc.reading_type = 'daily_reading';

-- Test 3: Print queue functionality
-- SELECT COUNT(*) FROM assignments 
-- WHERE print_status = 'needs_printing' 
--   AND scheduled_date >= CURRENT_DATE 
--   AND scheduled_date <= CURRENT_DATE + INTERVAL '5 days';

-- ========================================
-- EMERGENCY ROLLBACK COMMANDS
-- ========================================

-- If deployment fails, use these to rollback:
-- 1. Stop application
-- 2. Restore database backup
-- 3. Restart with previous version

-- End of migration script